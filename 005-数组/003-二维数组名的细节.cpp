#include <iostream>
using namespace std;

int main() {
	int arr1[2][3] = {
		{1,2,3},
		{4,5,6}
	};
	//注：二维数组名本质上是指针变量数组的指针变量,而整个二维数组实例内存为另一段连续的内存空间
	//第一层数组元素本质上是一维数组指针变量

	//获取内存大小
	cout << "二维数组的内存大小:" << sizeof(arr1) << endl;  //数组指针在sizeof上下文中具有"数组性"
	cout << "第一行(第一层数组)内存大小:" << sizeof(arr1[0]) << endl; //这里的arr1[0]是数组指针,不是它所指向的数组实例
	cout << "第一行第一个元素的内存大小:" << sizeof(arr1[0][0]) << endl; //这里的arr1[0][0]二维数组具体的内存实例
	//通过内存大小可以知道行数和列数
	cout << "二维数组的行数为:" << sizeof(arr1) / sizeof(arr1[0]) << endl;
	cout << "二维数组的列数为:" << sizeof(arr1[0]) / sizeof(arr1[0][0]) << endl;

	//获取地址
	cout << "二维数组实例的地址:" << arr1 << endl; //16进制
	cout << "二维数组实例的地址(十进制)" << (int)arr1 << endl; //十进制
	cout << "二维数组第一个数组实例的地址:" << (int)arr1[0] << endl;  //与上面重合
	cout << "二维数组的首元素的地址" << (int)&arr1[0][0] << endl;  //与上面重合

	cout << "二维数组第二个数组实例的地址:" << (int)arr1[1] << endl; //比上面的地址多了12
	cout << "二位数组第二个数组实例的第一个元素的地址值:" << (int)&arr1[1][0] << endl; //与二维数组第二个数组实例的地址完全一致
}