#include <iostream>
using namespace std;

int main() {
	//字符型所占内存大小
	char a = 'a'; //英文字母占用一个字节.  在微软的编译器中解释中文字符的时候是用两个字节
	cout << "a=" << sizeof(a) << endl;

	//ascii编码下在内存中真实存储的数据 a-97 A-65
	cout << "字符a内存中的整数字面值:" << (int)a << endl;
	cout << "字符A内存中的整数字面值:" << (int)'A' << endl;
	cout << "字符A=" << 'A' << endl;



	//int 等整型类型可以接收字符型的原理. 每个字符底层都会转换一个整数的"字面值",这个字面值对应着编码表中的整数
	//并不是说字符就是整型类型,只是可以倍int等接收或者强转

	//接收中文字符
	char b = '中';
	cout << "字符b的整数字面值" << (int)b << endl; //一个字节最多存256个整数字面值,显然中文存储的整数字面值存储不完整.但C++编译器底层会作一定的算法使其对应到编码表
	cout << "b=" << b << endl; // 显示为空

}